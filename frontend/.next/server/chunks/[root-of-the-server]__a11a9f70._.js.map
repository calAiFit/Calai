{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/dorjotgoo/Desktop/Calai/frontend/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  errorFormat: \"pretty\",\n});\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\n\nexport const db = {\n  async getProfileByUserId(userId: string) {\n    return prisma.profile.findUnique({\n      where: { userId },\n    });\n  },\n\n  async upsertProfile(userId: string, data: {\n    name: string;\n    age?: number;\n    gender?: string;\n    height?: number;\n    weight?: number;\n    targetWeight?: number;\n    activityLevel?: string;\n    avatarUrl: string;\n  }) {\n    return prisma.profile.upsert({\n      where: { userId },\n      update: data,\n      create: { \n        userId, \n        name: data.name,\n        avatarUrl: data.avatarUrl,\n        ...(data.age && { age: data.age }),\n        ...(data.gender && { gender: data.gender }),\n        ...(data.height && { height: data.height }),\n        ...(data.weight && { weight: data.weight }),\n        ...(data.targetWeight && { targetWeight: data.targetWeight }),\n        ...(data.activityLevel && { activityLevel: data.activityLevel }),\n      },\n    });\n  },\n\n  async getDailyGoal(userId: string, date: Date) {\n    return prisma.dailyGoal.findUnique({\n      where: {\n        userId_date: {\n          userId,\n          date: new Date(date.toDateString()),\n        },\n      },\n    });\n  },\n\n  async upsertDailyGoal(userId: string, date: Date, data: {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fats: number;\n  }) {\n    return prisma.dailyGoal.upsert({\n      where: {\n        userId_date: {\n          userId,\n          date: new Date(date.toDateString()),\n        },\n      },\n      update: data,\n      create: { userId, date: new Date(date.toDateString()), ...data },\n    });\n  },\n\n  async addIntakeHistory(userId: string, data: {\n    foodName: string;\n    calories: number;\n    protein: number;\n    carbs: number;\n    fats: number;\n  }) {\n    const intakeRecord = await prisma.dailyIntakeHistory.create({\n      data: {\n        userId,\n        date: new Date(),\n        ...data,\n      },\n    });\n    \n\n    await this.updateDailySummary(userId);\n    \n    return intakeRecord;\n  },\n\n  async getIntakeHistory(userId: string, date?: Date) {\n    const targetDate = date || new Date();\n    return prisma.dailyIntakeHistory.findMany({\n      where: {\n        userId,\n        date: {\n          gte: new Date(targetDate.toDateString()),\n          lt: new Date(new Date(targetDate).setDate(targetDate.getDate() + 1)),\n        },\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n  },\n\n  async addWorkout(userId: string, data: {\n    duration: number;\n    calories: number;\n    exercises: string[];\n  }) {\n    return prisma.workout.create({\n      data: {\n        userId,\n        date: new Date(),\n        ...data,\n      },\n    });\n  },\n\n  async getWorkouts(userId: string, limit = 10) {\n    return prisma.workout.findMany({\n      where: { userId },\n      orderBy: { date: \"desc\" },\n      take: limit,\n    });\n  },\n\n\n  async addFoodRecognition(userId: string, data: {\n    imageUrl: string;\n    foodName: string;\n    confidence: number;\n    calories?: number;\n    protein?: number;\n    carbs?: number;\n    fats?: number;\n  }) {\n    return prisma.foodRecognition.create({\n      data: {\n        userId,\n        ...data,\n      },\n    });\n  },\n\n  async getFoodRecognitions(userId: string, limit = 10) {\n    return prisma.foodRecognition.findMany({\n      where: { userId },\n      orderBy: { createdAt: \"desc\" },\n      take: limit,\n    });\n  },\n\n\n  async getWeeklyIntakeSummary(userId: string) {\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n\n    return prisma.dailyIntakeHistory.groupBy({\n      by: [\"date\"],\n      where: {\n        userId,\n        date: { gte: weekAgo },\n      },\n      _sum: {\n        calories: true,\n        protein: true,\n        carbs: true,\n        fats: true,\n      },\n      orderBy: { date: \"asc\" },\n    });\n  },\n\n  async getMonthlyWorkoutSummary(userId: string) {\n    const monthAgo = new Date();\n    monthAgo.setMonth(monthAgo.getMonth() - 1);\n\n    return prisma.workout.findMany({\n      where: {\n        userId,\n        date: { gte: monthAgo },\n      },\n      orderBy: { date: \"desc\" },\n    });\n  },\n\n\n  async addBurnedCalories(userId: string, data: {\n    calories: number;\n    activity: string;\n    duration?: number;\n  }) {\n    const today = new Date();\n    return prisma.dailyBurnedCalories.upsert({\n      where: {\n        userId_date_activity: {\n          userId,\n          date: new Date(today.toDateString()),\n          activity: data.activity,\n        },\n      },\n      update: {\n        calories: { increment: data.calories },\n        duration: data.duration ? { increment: data.duration } : undefined,\n      },\n      create: {\n        userId,\n        date: new Date(today.toDateString()),\n        ...data,\n      },\n    });\n  },\n\n  async getBurnedCalories(userId: string, date?: Date) {\n    const targetDate = date || new Date();\n    return prisma.dailyBurnedCalories.findMany({\n      where: {\n        userId,\n        date: {\n          gte: new Date(targetDate.toDateString()),\n          lt: new Date(new Date(targetDate).setDate(targetDate.getDate() + 1)),\n        },\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n  },\n\n  async getTotalBurnedCalories(userId: string, date?: Date) {\n    const targetDate = date || new Date();\n    const result = await prisma.dailyBurnedCalories.aggregate({\n      where: {\n        userId,\n        date: {\n          gte: new Date(targetDate.toDateString()),\n          lt: new Date(new Date(targetDate).setDate(targetDate.getDate() + 1)),\n        },\n      },\n      _sum: {\n        calories: true,\n      },\n    });\n    return result._sum.calories || 0;\n  },\n\n\n  async getDailySummary(userId: string, date?: Date) {\n    const targetDate = date || new Date();\n    return prisma.dailySummary.findUnique({\n      where: {\n        userId_date: {\n          userId,\n          date: new Date(targetDate.toDateString()),\n        },\n      },\n    });\n  },\n\n  async updateDailySummary(userId: string, date?: Date) {\n    const targetDate = date || new Date();\n    const dateStr = new Date(targetDate.toDateString());\n    \n\n    const consumedResult = await prisma.dailyIntakeHistory.aggregate({\n      where: {\n        userId,\n        date: {\n          gte: dateStr,\n          lt: new Date(new Date(targetDate).setDate(targetDate.getDate() + 1)),\n        },\n      },\n      _sum: {\n        calories: true,\n        protein: true,\n        carbs: true,\n        fats: true,\n      },\n    });\n\n\n    const burnedResult = await prisma.dailyBurnedCalories.aggregate({\n      where: {\n        userId,\n        date: {\n          gte: dateStr,\n          lt: new Date(new Date(targetDate).setDate(targetDate.getDate() + 1)),\n        },\n      },\n      _sum: {\n        calories: true,\n      },\n    });\n\n    const totalConsumed = consumedResult._sum.calories || 0;\n    const totalBurned = burnedResult._sum.calories || 0;\n    const netCalories = totalConsumed - totalBurned;\n\n    return prisma.dailySummary.upsert({\n      where: {\n        userId_date: {\n          userId,\n          date: dateStr,\n        },\n      },\n      update: {\n        totalConsumed,\n        totalBurned,\n        netCalories,\n        protein: consumedResult._sum.protein || 0,\n        carbs: consumedResult._sum.carbs || 0,\n        fats: consumedResult._sum.fats || 0,\n      },\n      create: {\n        userId,\n        date: dateStr,\n        totalConsumed,\n        totalBurned,\n        netCalories,\n        protein: consumedResult._sum.protein || 0,\n        carbs: consumedResult._sum.carbs || 0,\n        fats: consumedResult._sum.fats || 0,\n      },\n    });\n  },\n\n\n  async getHistoricalData(userId: string, days: number = 7) {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    return prisma.dailySummary.findMany({\n      where: {\n        userId,\n        date: { gte: startDate },\n      },\n      orderBy: { date: \"desc\" },\n    });\n  },\n\n\n  async resetDailyData(userId: string, date: Date) {\n\n    await this.updateDailySummary(userId, date);\n    \n  },\n\n  async getWeightEntries(profileId: string) {\n    console.log(\"Fetching weight entries for profileId:\", profileId);\n    const result = await prisma.weightEntry.findMany({\n      where: { profileId },\n      orderBy: { date: \"asc\" },\n    });\n    console.log(\"Found weight entries:\", result.length);\n    return result;\n  },\n\n  async addWeightEntry(profileId: string, weight: number) {\n    console.log(\"Adding weight entry to database:\", { profileId, weight });\n    const result = await prisma.weightEntry.create({\n      data: {\n        profileId,\n        weight,\n        date: new Date(),\n      },\n    });\n    console.log(\"Weight entry created:\", result);\n    return result;\n  },\n};\n\nexport default prisma;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file:///Users/dorjotgoo/Desktop/Calai/frontend/src/app/api/daily-goals/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { getAuth } from \"@clerk/nextjs/server\";\nimport { db } from \"@/lib/prisma\";\nimport { z } from \"zod\";\n\nconst dailyGoalSchema = z.object({\n  calories: z.number().min(0).max(10000),\n  protein: z.number().min(0).max(1000),\n  carbs: z.number().min(0).max(1000),\n  fats: z.number().min(0).max(1000),\n  date: z.string().optional(),\n});\n\nexport async function GET(req: NextRequest) {\n  const { userId } = getAuth(req);\n  if (!userId) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  try {\n    const { searchParams } = new URL(req.url);\n    const dateParam = searchParams.get(\"date\");\n    const date = dateParam ? new Date(dateParam) : new Date();\n\n    const dailyGoal = await db.getDailyGoal(userId, date);\n\n    return NextResponse.json({ dailyGoal });\n  } catch (error) {\n    console.error(\"GET /api/daily-goals error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch daily goals\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  const { userId } = getAuth(req);\n  if (!userId) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  try {\n    const body = await req.json();\n    const validatedData = dailyGoalSchema.parse(body);\n\n    const date = validatedData.date ? new Date(validatedData.date) : new Date();\n    const { date: _date, ...goalData } = validatedData;\n    \n\n    void _date;\n\n    const dailyGoal = await db.upsertDailyGoal(userId, date, goalData);\n\n    return NextResponse.json({ dailyGoal });\n  } catch (error) {\n    console.error(\"POST /api/daily-goals error:\", error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: \"Invalid input data\", details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: \"Failed to create/update daily goals\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAAA;;;;;AAEA,MAAM,kBAAkB,wJAAC,CAAC,MAAM,CAAC;IAC/B,UAAU,wJAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAChC,SAAS,wJAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC/B,OAAO,wJAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC7B,MAAM,wJAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC5B,MAAM,wJAAC,CAAC,MAAM,GAAG,QAAQ;AAC3B;AAEO,eAAe,IAAI,GAAgB;IACxC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wLAAO,EAAC;IAC3B,IAAI,CAAC,QAAQ;QACX,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,YAAY,aAAa,GAAG,CAAC;QACnC,MAAM,OAAO,YAAY,IAAI,KAAK,aAAa,IAAI;QAEnD,MAAM,YAAY,MAAM,qHAAE,CAAC,YAAY,CAAC,QAAQ;QAEhD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;QAAU;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wLAAO,EAAC;IAC3B,IAAI,CAAC,QAAQ;QACX,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,gBAAgB,gBAAgB,KAAK,CAAC;QAE5C,MAAM,OAAO,cAAc,IAAI,GAAG,IAAI,KAAK,cAAc,IAAI,IAAI,IAAI;QACrE,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,UAAU,GAAG;QAGrC,KAAK;QAEL,MAAM,YAAY,MAAM,qHAAE,CAAC,eAAe,CAAC,QAAQ,MAAM;QAEzD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;QAAU;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAE9C,IAAI,iBAAiB,wJAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAsB,SAAS,MAAM,MAAM;YAAC,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsC,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}