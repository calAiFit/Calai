(()=>{var e={};e.id=495,e.ids=[495],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},37740:(e,t,a)=>{"use strict";a.d(t,{db:()=>i,A:()=>n,z:()=>s});let r=require("@prisma/client"),s=globalThis.prisma??new r.PrismaClient({log:["error"],errorFormat:"pretty"}),i={getProfileByUserId:async e=>s.profile.findUnique({where:{userId:e}}),upsertProfile:async(e,t)=>s.profile.upsert({where:{userId:e},update:t,create:{userId:e,name:t.name,avatarUrl:t.avatarUrl,...t.age&&{age:t.age},...t.gender&&{gender:t.gender},...t.height&&{height:t.height},...t.weight&&{weight:t.weight},...t.targetWeight&&{targetWeight:t.targetWeight},...t.activityLevel&&{activityLevel:t.activityLevel}}}),getDailyGoal:async(e,t)=>s.dailyGoal.findUnique({where:{userId_date:{userId:e,date:new Date(t.toDateString())}}}),upsertDailyGoal:async(e,t,a)=>s.dailyGoal.upsert({where:{userId_date:{userId:e,date:new Date(t.toDateString())}},update:a,create:{userId:e,date:new Date(t.toDateString()),...a}}),async addIntakeHistory(e,t){let a=await s.dailyIntakeHistory.create({data:{userId:e,date:new Date,...t}});return await this.updateDailySummary(e),a},async getIntakeHistory(e,t){let a=t||new Date;return s.dailyIntakeHistory.findMany({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},orderBy:{createdAt:"desc"}})},addWorkout:async(e,t)=>s.workout.create({data:{userId:e,date:new Date,...t}}),getWorkouts:async(e,t=10)=>s.workout.findMany({where:{userId:e},orderBy:{date:"desc"},take:t}),addFoodRecognition:async(e,t)=>s.foodRecognition.create({data:{userId:e,...t}}),getFoodRecognitions:async(e,t=10)=>s.foodRecognition.findMany({where:{userId:e},orderBy:{createdAt:"desc"},take:t}),async getWeeklyIntakeSummary(e){let t=new Date;return t.setDate(t.getDate()-7),s.dailyIntakeHistory.groupBy({by:["date"],where:{userId:e,date:{gte:t}},_sum:{calories:!0,protein:!0,carbs:!0,fats:!0},orderBy:{date:"asc"}})},async getMonthlyWorkoutSummary(e){let t=new Date;return t.setMonth(t.getMonth()-1),s.workout.findMany({where:{userId:e,date:{gte:t}},orderBy:{date:"desc"}})},async addBurnedCalories(e,t){let a=new Date;return s.dailyBurnedCalories.upsert({where:{userId_date_activity:{userId:e,date:new Date(a.toDateString()),activity:t.activity}},update:{calories:{increment:t.calories},duration:t.duration?{increment:t.duration}:void 0},create:{userId:e,date:new Date(a.toDateString()),...t}})},async getBurnedCalories(e,t){let a=t||new Date;return s.dailyBurnedCalories.findMany({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},orderBy:{createdAt:"desc"}})},async getTotalBurnedCalories(e,t){let a=t||new Date;return(await s.dailyBurnedCalories.aggregate({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0}}))._sum.calories||0},async getDailySummary(e,t){let a=t||new Date;return s.dailySummary.findUnique({where:{userId_date:{userId:e,date:new Date(a.toDateString())}}})},async updateDailySummary(e,t){let a=t||new Date,r=new Date(a.toDateString()),i=await s.dailyIntakeHistory.aggregate({where:{userId:e,date:{gte:r,lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0,protein:!0,carbs:!0,fats:!0}}),n=await s.dailyBurnedCalories.aggregate({where:{userId:e,date:{gte:r,lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0}}),o=i._sum.calories||0,d=n._sum.calories||0,u=o-d;return s.dailySummary.upsert({where:{userId_date:{userId:e,date:r}},update:{totalConsumed:o,totalBurned:d,netCalories:u,protein:i._sum.protein||0,carbs:i._sum.carbs||0,fats:i._sum.fats||0},create:{userId:e,date:r,totalConsumed:o,totalBurned:d,netCalories:u,protein:i._sum.protein||0,carbs:i._sum.carbs||0,fats:i._sum.fats||0}})},async getHistoricalData(e,t=7){let a=new Date;return a.setDate(a.getDate()-t),s.dailySummary.findMany({where:{userId:e,date:{gte:a}},orderBy:{date:"desc"}})},async resetDailyData(e,t){await this.updateDailySummary(e,t)}},n=s},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73024:e=>{"use strict";e.exports=require("node:fs")},76760:e=>{"use strict";e.exports=require("node:path")},77598:e=>{"use strict";e.exports=require("node:crypto")},78335:()=>{},86305:(e,t,a)=>{"use strict";a.r(t),a.d(t,{patchFetch:()=>w,routeModule:()=>l,serverHooks:()=>p,workAsyncStorage:()=>y,workUnitAsyncStorage:()=>g});var r={};a.r(r),a.d(r,{GET:()=>c});var s=a(96559),i=a(48088),n=a(37719),o=a(32190),d=a(26291),u=a(37740);async function c(e){let{userId:t}=(0,d.xI)(e);if(!t)return o.NextResponse.json({error:"Unauthorized"},{status:401});try{let{searchParams:a}=new URL(e.url),r=parseInt(a.get("days")||"7"),s=await u.db.getHistoricalData(t,r);return o.NextResponse.json({historicalData:s})}catch(e){return console.error("GET /api/historical-data error:",e),o.NextResponse.json({error:"Failed to fetch historical data"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/historical-data/route",pathname:"/api/historical-data",filename:"route",bundlePath:"app/api/historical-data/route"},resolvedPagePath:"/Users/dorjotgoo/Desktop/Calai/frontend/src/app/api/historical-data/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:y,workUnitAsyncStorage:g,serverHooks:p}=l;function w(){return(0,n.patchFetch)({workAsyncStorage:y,workUnitAsyncStorage:g})}},96487:()=>{},96559:(e,t,a)=>{"use strict";e.exports=a(44870)}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[80,291],()=>a(86305));module.exports=r})();