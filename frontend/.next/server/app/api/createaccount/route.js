(()=>{var e={};e.id=687,e.ids=[687],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},37740:(e,t,a)=>{"use strict";a.d(t,{db:()=>s,A:()=>i,z:()=>n});let r=require("@prisma/client"),n=globalThis.prisma??new r.PrismaClient({log:["error"],errorFormat:"pretty"}),s={getProfileByUserId:async e=>n.profile.findUnique({where:{userId:e}}),upsertProfile:async(e,t)=>n.profile.upsert({where:{userId:e},update:t,create:{userId:e,name:t.name,avatarUrl:t.avatarUrl,...t.age&&{age:t.age},...t.gender&&{gender:t.gender},...t.height&&{height:t.height},...t.weight&&{weight:t.weight},...t.targetWeight&&{targetWeight:t.targetWeight},...t.activityLevel&&{activityLevel:t.activityLevel}}}),getDailyGoal:async(e,t)=>n.dailyGoal.findUnique({where:{userId_date:{userId:e,date:new Date(t.toDateString())}}}),upsertDailyGoal:async(e,t,a)=>n.dailyGoal.upsert({where:{userId_date:{userId:e,date:new Date(t.toDateString())}},update:a,create:{userId:e,date:new Date(t.toDateString()),...a}}),async addIntakeHistory(e,t){let a=await n.dailyIntakeHistory.create({data:{userId:e,date:new Date,...t}});return await this.updateDailySummary(e),a},async getIntakeHistory(e,t){let a=t||new Date;return n.dailyIntakeHistory.findMany({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},orderBy:{createdAt:"desc"}})},addWorkout:async(e,t)=>n.workout.create({data:{userId:e,date:new Date,...t}}),getWorkouts:async(e,t=10)=>n.workout.findMany({where:{userId:e},orderBy:{date:"desc"},take:t}),addFoodRecognition:async(e,t)=>n.foodRecognition.create({data:{userId:e,...t}}),getFoodRecognitions:async(e,t=10)=>n.foodRecognition.findMany({where:{userId:e},orderBy:{createdAt:"desc"},take:t}),async getWeeklyIntakeSummary(e){let t=new Date;return t.setDate(t.getDate()-7),n.dailyIntakeHistory.groupBy({by:["date"],where:{userId:e,date:{gte:t}},_sum:{calories:!0,protein:!0,carbs:!0,fats:!0},orderBy:{date:"asc"}})},async getMonthlyWorkoutSummary(e){let t=new Date;return t.setMonth(t.getMonth()-1),n.workout.findMany({where:{userId:e,date:{gte:t}},orderBy:{date:"desc"}})},async addBurnedCalories(e,t){let a=new Date;return n.dailyBurnedCalories.upsert({where:{userId_date_activity:{userId:e,date:new Date(a.toDateString()),activity:t.activity}},update:{calories:{increment:t.calories},duration:t.duration?{increment:t.duration}:void 0},create:{userId:e,date:new Date(a.toDateString()),...t}})},async getBurnedCalories(e,t){let a=t||new Date;return n.dailyBurnedCalories.findMany({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},orderBy:{createdAt:"desc"}})},async getTotalBurnedCalories(e,t){let a=t||new Date;return(await n.dailyBurnedCalories.aggregate({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0}}))._sum.calories||0},async getDailySummary(e,t){let a=t||new Date;return n.dailySummary.findUnique({where:{userId_date:{userId:e,date:new Date(a.toDateString())}}})},async updateDailySummary(e,t){let a=t||new Date,r=new Date(a.toDateString()),s=await n.dailyIntakeHistory.aggregate({where:{userId:e,date:{gte:r,lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0,protein:!0,carbs:!0,fats:!0}}),i=await n.dailyBurnedCalories.aggregate({where:{userId:e,date:{gte:r,lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0}}),o=s._sum.calories||0,d=i._sum.calories||0,u=o-d;return n.dailySummary.upsert({where:{userId_date:{userId:e,date:r}},update:{totalConsumed:o,totalBurned:d,netCalories:u,protein:s._sum.protein||0,carbs:s._sum.carbs||0,fats:s._sum.fats||0},create:{userId:e,date:r,totalConsumed:o,totalBurned:d,netCalories:u,protein:s._sum.protein||0,carbs:s._sum.carbs||0,fats:s._sum.fats||0}})},async getHistoricalData(e,t=7){let a=new Date;return a.setDate(a.getDate()-t),n.dailySummary.findMany({where:{userId:e,date:{gte:a}},orderBy:{date:"desc"}})},async resetDailyData(e,t){await this.updateDailySummary(e,t)}},i=n},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},67976:(e,t,a)=>{"use strict";a.r(t),a.d(t,{patchFetch:()=>D,routeModule:()=>y,serverHooks:()=>w,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>p});var r={};a.r(r),a.d(r,{POST:()=>l});var n=a(96559),s=a(48088),i=a(37719),o=a(32190),d=a(37740),u=a(45697);let c=u.z.object({name:u.z.string().min(1),email:u.z.string().email(),password:u.z.string().min(6)});async function l(e){try{let t=await e.json(),a=c.parse(t);if(await d.z.user.findUnique({where:{email:a.email}}))return o.NextResponse.json({error:"User already exists"},{status:409});return o.NextResponse.json({message:"Account created successfully"})}catch(e){if(console.error("POST /api/createaccount error:",e),e instanceof u.z.ZodError)return o.NextResponse.json({error:"Invalid input data",details:e.errors},{status:400});return o.NextResponse.json({error:"Failed to create account"},{status:500})}}let y=new n.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/createaccount/route",pathname:"/api/createaccount",filename:"route",bundlePath:"app/api/createaccount/route"},resolvedPagePath:"/Users/dorjotgoo/Desktop/Calai/frontend/src/app/api/createaccount/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:g,workUnitAsyncStorage:p,serverHooks:w}=y;function D(){return(0,i.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:p})}},78335:()=>{},96487:()=>{}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[80,595],()=>a(67976));module.exports=r})();