(()=>{var e={};e.id=991,e.ids=[991],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},31780:(e,t,a)=>{"use strict";a.r(t),a.d(t,{patchFetch:()=>w,routeModule:()=>c,serverHooks:()=>D,workAsyncStorage:()=>y,workUnitAsyncStorage:()=>g});var r={};a.r(r),a.d(r,{POST:()=>u,PUT:()=>l});var s=a(96559),n=a(48088),i=a(37719),o=a(32190),d=a(37740);async function u(e){try{let{authorization:t}=await e.json();if(t!==process.env.CRON_SECRET)return o.NextResponse.json({error:"Unauthorized"},{status:401});let a=new Date;a.setDate(a.getDate()-1);let r=await d.A.dailyIntakeHistory.findMany({where:{date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},select:{userId:!0},distinct:["userId"]}),s=await d.A.dailyBurnedCalories.findMany({where:{date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},select:{userId:!0},distinct:["userId"]}),n=new Set([...r.map(e=>e.userId),...s.map(e=>e.userId)]),i=Array.from(n).map(e=>({userId:e})),u=i.map(async e=>{try{await d.db.resetDailyData(e.userId,a)}catch(t){console.error(`Failed to reset data for user ${e.userId}:`,t)}});return await Promise.all(u),o.NextResponse.json({message:"Daily reset completed",usersProcessed:i.length,date:a.toISOString().split("T")[0]})}catch(e){return console.error("Daily reset error:",e),o.NextResponse.json({error:"Failed to process daily reset"},{status:500})}}async function l(e){try{let{userId:t,date:a}=await e.json();if(!t)return o.NextResponse.json({error:"User ID required"},{status:400});let r=a?new Date(a):new Date;return await d.db.resetDailyData(t,r),o.NextResponse.json({message:"Manual reset completed",userId:t,date:r.toISOString().split("T")[0]})}catch(e){return console.error("Manual reset error:",e),o.NextResponse.json({error:"Failed to process manual reset"},{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/daily-reset/route",pathname:"/api/daily-reset",filename:"route",bundlePath:"app/api/daily-reset/route"},resolvedPagePath:"/Users/dorjotgoo/Desktop/Calai/frontend/src/app/api/daily-reset/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:y,workUnitAsyncStorage:g,serverHooks:D}=c;function w(){return(0,i.patchFetch)({workAsyncStorage:y,workUnitAsyncStorage:g})}},37740:(e,t,a)=>{"use strict";a.d(t,{db:()=>n,A:()=>i,z:()=>s});let r=require("@prisma/client"),s=globalThis.prisma??new r.PrismaClient({log:["error"],errorFormat:"pretty"}),n={getProfileByUserId:async e=>s.profile.findUnique({where:{userId:e}}),upsertProfile:async(e,t)=>s.profile.upsert({where:{userId:e},update:t,create:{userId:e,name:t.name,avatarUrl:t.avatarUrl,...t.age&&{age:t.age},...t.gender&&{gender:t.gender},...t.height&&{height:t.height},...t.weight&&{weight:t.weight},...t.targetWeight&&{targetWeight:t.targetWeight},...t.activityLevel&&{activityLevel:t.activityLevel}}}),getDailyGoal:async(e,t)=>s.dailyGoal.findUnique({where:{userId_date:{userId:e,date:new Date(t.toDateString())}}}),upsertDailyGoal:async(e,t,a)=>s.dailyGoal.upsert({where:{userId_date:{userId:e,date:new Date(t.toDateString())}},update:a,create:{userId:e,date:new Date(t.toDateString()),...a}}),async addIntakeHistory(e,t){let a=await s.dailyIntakeHistory.create({data:{userId:e,date:new Date,...t}});return await this.updateDailySummary(e),a},async getIntakeHistory(e,t){let a=t||new Date;return s.dailyIntakeHistory.findMany({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},orderBy:{createdAt:"desc"}})},addWorkout:async(e,t)=>s.workout.create({data:{userId:e,date:new Date,...t}}),getWorkouts:async(e,t=10)=>s.workout.findMany({where:{userId:e},orderBy:{date:"desc"},take:t}),addFoodRecognition:async(e,t)=>s.foodRecognition.create({data:{userId:e,...t}}),getFoodRecognitions:async(e,t=10)=>s.foodRecognition.findMany({where:{userId:e},orderBy:{createdAt:"desc"},take:t}),async getWeeklyIntakeSummary(e){let t=new Date;return t.setDate(t.getDate()-7),s.dailyIntakeHistory.groupBy({by:["date"],where:{userId:e,date:{gte:t}},_sum:{calories:!0,protein:!0,carbs:!0,fats:!0},orderBy:{date:"asc"}})},async getMonthlyWorkoutSummary(e){let t=new Date;return t.setMonth(t.getMonth()-1),s.workout.findMany({where:{userId:e,date:{gte:t}},orderBy:{date:"desc"}})},async addBurnedCalories(e,t){let a=new Date;return s.dailyBurnedCalories.upsert({where:{userId_date_activity:{userId:e,date:new Date(a.toDateString()),activity:t.activity}},update:{calories:{increment:t.calories},duration:t.duration?{increment:t.duration}:void 0},create:{userId:e,date:new Date(a.toDateString()),...t}})},async getBurnedCalories(e,t){let a=t||new Date;return s.dailyBurnedCalories.findMany({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},orderBy:{createdAt:"desc"}})},async getTotalBurnedCalories(e,t){let a=t||new Date;return(await s.dailyBurnedCalories.aggregate({where:{userId:e,date:{gte:new Date(a.toDateString()),lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0}}))._sum.calories||0},async getDailySummary(e,t){let a=t||new Date;return s.dailySummary.findUnique({where:{userId_date:{userId:e,date:new Date(a.toDateString())}}})},async updateDailySummary(e,t){let a=t||new Date,r=new Date(a.toDateString()),n=await s.dailyIntakeHistory.aggregate({where:{userId:e,date:{gte:r,lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0,protein:!0,carbs:!0,fats:!0}}),i=await s.dailyBurnedCalories.aggregate({where:{userId:e,date:{gte:r,lt:new Date(new Date(a).setDate(a.getDate()+1))}},_sum:{calories:!0}}),o=n._sum.calories||0,d=i._sum.calories||0,u=o-d;return s.dailySummary.upsert({where:{userId_date:{userId:e,date:r}},update:{totalConsumed:o,totalBurned:d,netCalories:u,protein:n._sum.protein||0,carbs:n._sum.carbs||0,fats:n._sum.fats||0},create:{userId:e,date:r,totalConsumed:o,totalBurned:d,netCalories:u,protein:n._sum.protein||0,carbs:n._sum.carbs||0,fats:n._sum.fats||0}})},async getHistoricalData(e,t=7){let a=new Date;return a.setDate(a.getDate()-t),s.dailySummary.findMany({where:{userId:e,date:{gte:a}},orderBy:{date:"desc"}})},async resetDailyData(e,t){await this.updateDailySummary(e,t)}},i=s},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},96487:()=>{},96559:(e,t,a)=>{"use strict";e.exports=a(44870)}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[80],()=>a(31780));module.exports=r})();